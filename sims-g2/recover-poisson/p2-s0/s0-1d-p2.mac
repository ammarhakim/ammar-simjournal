file_search_maxima: append(file_search_maxima,
  [
  "/Users/ahakim/research/ammar-simjournal/sims-g2/recover-poisson/code/###.{lisp,mac}"
  ])$


load("dg-poisson")$

polyOrder : 2$
/* Left/right domain boundary */
xL : 0$
xR : 1$
nmax : 3$
dx : (xR-xL)/nmax$
bc : basisC[polyOrder]$

/* Exact solution ... */
exactSol(z) := z*(z-1)*(z-1/2)^3$
/* .. source term corresponding to it */
_src : -diff(exactSol(z),z,2)$
define(srcFunc(z), _src)$

/* Compute exact projection and compute Laplacian for interior */
exactProj : projectOnBasisGrid(exactSol, bc, xL, xR, nmax)$
/* Compare with source projection */
srcProj : projectOnBasisGrid(srcFunc, bc, xL, xR, nmax)$

/* Compute interior and left skin residual */
stencilI : getLaplacianStencil(polyOrder, exactProj[1], exactProj[2], exactProj[3])$
stencilSL : getLaplacianSkinStencil('left, polyOrder, exactProj[1], exactProj[2], [1,0,0],[0,0,0])$
stencilSR : getLaplacianSkinStencil('right, polyOrder, exactProj[2], exactProj[3], [0,0,0],[1,0,0])$
/* First interior stencil */
stencilFI : getLaplacianFirstInteriorStencil(polyOrder, exactProj[1], exactProj[2], exactProj[3],
  [1,0,0], [0,0,0]
  )$
/* First interior stencil (for three cells the middle cell is first interior from both sides) */
stencilFI2 : getLaplacianFirstInteriorStencil(polyOrder, exactProj[1], exactProj[2], exactProj[3],
  [1,0,0], [1,0,0]
  )$

remPolyI : fullratsimp(4/dx^2*stencilI + srcProj[2])$

remPolySL : fullratsimp(4/dx^2*stencilSL + srcProj[1])$
remPolySR : fullratsimp(4/dx^2*stencilSR + srcProj[3])$

remPolyFI : fullratsimp(4/dx^2*stencilFI + srcProj[2])$
remPolyFI2 : fullratsimp(4/dx^2*stencilFI2 + srcProj[2])$
