file_search_maxima: append(file_search_maxima,
  [
  "/Users/ahakim/research/ammar-simjournal/sims-g2/recover-poisson/code/###.{lisp,mac}"
  ])$


load("dg-poisson-2d")$

polyOrder : 2$
basisNm : "Tensor"$

/* Left/right domain boundary */
xL : 0$
xR : 1$
yL : 0$
yR : 1$
NX : 4$
NY : 4$
bc : getBasis(sconcat("basis-precalc/basis", basisNm, "2x"), polyOrder)$

/* Exact solution ... */
exactSol(x,y) := x*(x-1)*(x-1/2)^3*y*(y-1)*(y-1/2)^3$
/* .. source term corresponding to it */
_src : -(diff(exactSol(x,y),x,2)+diff(exactSol(x,y),y,2))$
define(srcFunc(x,y), _src)$

/* Compute exact projections */
exactProj : projectOnBasisGrid(exactSol, bc, xL, xR, yL, yR, NX, NY)$
srcProj : projectOnBasisGrid(srcFunc, bc, xL, xR, yL, yR, NX, NY)$

solList : solvePoissonEquation(basisNm, grid(lower=[0,0],upper=[1,1],cells=[NX,NY]),
  polyOrder, srcProj,
  BC(type=1, value=0), BC(type=1, value=0),
  BC(type=1, value=0), BC(type=1, value=0)
  )$

/* Compute difference */
solDiff : fullratsimp(solList-exactProj)$