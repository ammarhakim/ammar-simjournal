file_search_maxima: append(file_search_maxima,
  [
  "/Users/ahakim/research/ammar-simjournal/sims-g2/recover-poisson/code/###.{lisp,mac}"
  ])$


load("dg-poisson")$

polyOrder : 2$
/* Left/right domain boundary */
xL : -3$
xR : 3$
nmax : 3$
dx : (xR-xL)/nmax$
bc : basisC[polyOrder]$
bcC : etaDir(x, 0, dx, bc)$

/* Exact solution (Taylor series around x=0) ... */
exactSol(z) := a[0]+sum(a[i]*z^i/factorial(i),i,1,14)$

/* Compute exact projection */
exactProj : projectOnBasisGrid(exactSol, bc, xL, xR, nmax)$
/* Compute three-cell recovery in central cell */
hC : getRecov3CellGen(x, [2], polyOrder, 1, exactProj[1], exactProj[2], exactProj[3])$
hC2 : diff(hC,x,2)*4/dx^2$

/* Error polynomial for second derivatives */
d2ErrPoly : hC2-diff(exactSol(x),x,2)$
/* Compute errors in projections */
d2ErrPolyProj : calcInnerProdListGen([x], [[-dx/2,dx/2]], 1, bcC, d2ErrPoly)$


/* .. source term corresponding to it */
_src : -diff(exactSol(z),z,2)$
define(srcFunc(z), _src)$

/* Compare with source projection */
srcProj : projectOnBasisGrid(srcFunc, bc, xL, xR, nmax)$

/* Compute interior and left skin residual */
stencilI : getLaplacianStencil(polyOrder, exactProj[1], exactProj[2], exactProj[3])$
stencilS : getLaplacianSkinStencil(polyOrder, exactProj[1], exactProj[2], [1,0,0])$

remPolyI : fullratsimp(4/dx^2*stencilI + srcProj[2])$
remPolyS : fullratsimp(4/dx^2*stencilS + srcProj[1])$
