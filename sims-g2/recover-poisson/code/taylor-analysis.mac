load("modal-basis")$
load("basis-precalc/basisSer1x")$
load("recovery-calc/recovery")$

/* Taylor expansion */
func(z) := sum(a[i]*z^i/factorial(i),i,0,10)$

/* Function to project function on DG basis */
projectOnBasisGrid(func, bc, xL, xR, N) := block([dx],
  dx : (xR-xL)/N,
  return (
    makelist(
      calcInnerProdList([x],1,bc,
        subst(z=x*dx/2+(xL+(i-1/2)*dx), apply(func, [z]))),
      i, 1, N)
    )
  )$

/* Compute error as measured in the L2 */
calcL2NormError(func, funcProj, bc, xL, xR, N) := block([dx, bcc, l2],
  dx : (xR-xL)/N,
  l2 : 0,
  for i : 1 thru N do (
    bcc : etaDir(x, -xL+(i-1/2)*dx, dx, bc),
    l2 : l2 + integrate((func(x)-funcProj[i].bcc)^2, x, -xL+(i-1)*dx, -xL+i*dx)
    ),
  return(sqrt(float(l2)))
  )$

/* Compute remainder polynomial of 3-cell recovery. Second optional argument
* is order of continuity at cell edges */
calcRemPoly3Cell(polyOrder, [C]) := block(
  [bc, taylorProj, h, cmax],
  bc : basisC[polyOrder],
  cmax : if (length(C) > 0) then C[1] else 1,
  /* Project Taylor expansion on basis */
  taylorProj : projectOnBasisGrid(func, bc, -3*dx/2, 3*dx/2, 3),
  /* Contruct recovery polynomial */
  h : getRecov3CellGen(x, [dx], polyOrder, cmax, taylorProj[1], taylorProj[2], taylorProj[3]),
  return (expand(h-func(x)))
  )$

/* Compute remainder polynomial of 2-cell recovery. */
calcRemPoly2Cell(polyOrder) := block(
  [bc, taylorProj, h],
  bc : basisC[polyOrder],
  /* Project Taylor expansion on basis */
  taylorProj : projectOnBasisGrid(func, bc, -dx, dx, 2),
  /* Contruct recovery polynomial */
  h : getRecov2CellGen(x, [dx], polyOrder, taylorProj[1], taylorProj[2]),
  return (expand(h-func(x)))
  )$
