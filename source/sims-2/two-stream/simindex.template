<%!
  import glob
  def makeRst(lua, lang):
    extension = "lua"

    if lang == "lua":
      extension = "lua"
    elif lang == "python":
      extension = "py"

    fls = glob.glob("%s/%s-*.%s" % (lua, lua, extension))
    if (len(fls)>0):
      return fls[0][:fls[0].find(".")]
    return ""
%>
<%def name="mdl(sim, lang='lua')"><% luaFl = makeRst(sim, lang) %>:doc:`${sim} <${luaFl}>` </%def>

Simulation Index
================

Two-stream instability problem.

.. list-table::
  :header-rows: 1
  :widths: 10,90

  * - Number
    - Description
  * - ${mdl("s1")}
    - :math:`k\lambda_D=0.5`.

Two-stream as a test for positivity fixes

.. list-table::
  :header-rows: 1
  :widths: 10,90

  * - Number
    - Description

  * - ${mdl("m1")}
    - :math:`k\lambda_D=0.5`. polyOrder=2, :math:`64\times 16` mesh.
  * - ${mdl("m2")}
    - Same as m1, except with NV=32
  * - ${mdl("m3")}
    - Same as m1, except with NV=64        
  * - ${mdl("p1s")}
    - Same as m1, except with scaling positivity limiter
  * - ${mdl("p2s")}
    - Same as m2, except with scaling positivity limiter
  * - ${mdl("p3s")}
    - Same as m3, except with scaling positivity limiter    
  * - ${mdl("p1f")}
    - Same as m1, except with flux limiting
  * - ${mdl("p2f")}
    - Same as m2, except with flux limiting

Advection as a test for positivity fixes

.. list-table::
  :header-rows: 1
  :widths: 10,90

  * - Number
    - Description
  * - ${mdl("a1")}
    - Linear advection test, NX=32. No positivity fixes
  * - ${mdl("a1f")}
    - Linear advection test, NX=32. Flux limiting
  * - ${mdl("a1s")}
    - Linear advection test, NX=32. Scaling positivity limiter.
  * - ${mdl("a1sf")}
    - Linear advection test, NX=32. Hybrid scaling/flux limiting.

