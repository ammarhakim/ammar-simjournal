kill(all)$
load("clifford")$
load("cliffordan")$

clifford(ee,3)$

cross(a,b) := cliffsimpall( (a & b) | cinv(%iv) )$

declare([R, w, theta, phi], scalar)$
declare([psi], scalar)$
depends([psi], [w])$
assume(w>0)$
assume(w<R)$
declare([F], scalar)$
depends([F], [psi])$

/* toroidal coordinates */
xpos : (R+w*cos(theta))*(cos(phi)*ee[1] + sin(phi)*ee[2]) + w*sin(theta)*ee[3]$

/* Tangent vectors */
g[1] : diff(xpos,w)$
g[2] : diff(xpos,phi)$
g[3] : diff(xpos,theta)$

Jac : cliffsimpall (g[1] & g[2] & g[3]) | cinv(%iv)$

/* Dual vectors */
gd[1] : cliffsimpall( mvectdiff(w, xpos) )$
gd[2] : cliffsimpall( mvectdiff(phi, xpos) )$
gd[3] : cliffsimpall( mvectdiff(theta, xpos) )$

/* Poloidal B field = grad(psi) X grad(phi) + F(psi) grad(phi) */
B : cross(mvectdiff(psi,xpos), mvectdiff(phi,xpos)) + F*mvectdiff(phi,xpos)$

/* Vector derivative of B: contains scalar and bivector parts (scalar part is zero as div(B) = 0) */
DB : trigsimp( mvectdiff(B, xpos) )$
/* Curl B can be computed from the bivector part */
curlB : - grpart(DB,2) | %iv $

/* Grad-Shafranov operator is ephi component of curl B */
gradShaf : trigsimp( curlB | g[2] )$
