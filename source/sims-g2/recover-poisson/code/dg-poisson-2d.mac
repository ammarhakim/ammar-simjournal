/* Poisson solver based on recovery approach */

load("modal-basis")$
load("basis-precalc/basisSer2x")$
load("recovery-calc/recovery")$

/* Function to project function on DG basis */
projectOnBasisGrid(func, bc, xL, xR, yL, yR, NX, NY) := block([dx,dy],
  dx : (xR-xL)/NX,
  dy : (yR-yL)/NY,
  return (
    makelist(
      makelist(
        calcInnerProdList([x,y],1,bc,
          subst([z=x*dx/2+(xL+(i-1/2)*dx),w=y*dy/2+(yL+(j-1/2)*dy)], apply(func, [z,w]))),
        j, 1, NY),
      i, 1, NX)
    )
  )$

/* Function to compute L2 norm of field */
calcL2Norm(dgField, dx, dy) := block([NX,NY,NC,l2s],
  NX : length(dgField),
  NY : length(dgField[1]),
  NC : length(dgField[1][1]),
  l2s : 0,
  for i : 1 thru NX do (
    for j : 1 thru NY do (
      l2s : l2s+sum(dgField[i][j][k]^2,k,1,NC)
      )
    ),
  return (dx*dy*l2s/4)
  )$

getLaplacianStencil(basisNm, polyOrder, fL, fC, fR, fB, fT, bcx, bcy) := calcInnerProdList([x,y], 1,
  getBasis(sconcat("basis-precalc/basis", basisNm, "2x"), polyOrder),
  diff(calcRecov3CellGen(basisNm, x, [2,2], polyOrder, 1, fL, fC, fR, bcx), x, 2) +
  diff(calcRecov3CellGen(basisNm, y, [2,2], polyOrder, 1, fB, fC, fT, bcy), y, 2)
  )$

getLaplacianStencil2(bc, dx, dy, polyOrder, fL, fC, fR, fB, fT, bcx, bcy) := calcInnerProdList([x,y], 1,
  bc,
  4/dx^2*diff(calcRecov3CellGen(basisNm, x, [2,2], polyOrder, 1, fL, fC, fR, bcx), x, 2) +
  4/dy^2*diff(calcRecov3CellGen(basisNm, y, [2,2], polyOrder, 1, fB, fC, fT, bcy), y, 2)
  )$

/* Transform to [-1,1] */
xe(eta,dx,xj)  := eta*dx/2+xj$

/*
* grid: grid(lower=[xl,yl], upper=[xr,yr], cells=[NX,NY])
*
* bcLeft/bcRight, bcTop/bcBottom: BC(type=1, value=0)
*
*    type can be 1 (Dirichlet) or 2 (Neumann). Value muust be a number
*
* srcFunc is the disctere source projected on the basis functions
*/
solvePoissonEquation(basisNm, grid, polyOrder, srcFunc, bcLeft, bcRight, bcBottom, bcTop) := block(
  /* Declare local variables */
  [
  bc, NC, lower, upper, dx, cells,
  slist, eqnList, stencil,
  varList, fsol,
  bcL, bcR, bcB, bcT
  ],
  
  bc : getBasis(sconcat("basis-precalc/basis", basisNm, "2x"), polyOrder),
  NC : length(bc),
  lower : assoc(lower,grid),
  upper : assoc(upper,grid),
  cells : assoc(cells,grid),
  dx : makelist((upper[i]-lower[i])/cells[i], i, 1, 2),
  
  /* Substitution list for indexing ... */
  slist : append(
    /* x-direction ... */
    makelist(fL[k]=f[i-1,j,k],k,1,NC),
    makelist(fC[k]=f[i,j,k],k,1,NC),
    makelist(fR[k]=f[i+1,j,k],k,1,NC),
    /* ... y-direction */
    makelist(fB[k]=f[i,j-1,k],k,1,NC),
    makelist(fT[k]=f[i,j+1,k],k,1,NC)
    ),
  
  eqnList : [], /* List of equations */
  /* Construct equations in interior */
  stencil : subst(slist,
    getLaplacianStencil2(bc, dx[1], dx[2], polyOrder, fL, fC, fR, fB, fT, [0,0], [0,0])
    ),
  for ix : 2 thru NX-1 do (
    for iy : 2 thru NY-1 do (
      eqnList : append(eqnList, subst([i=ix,j=iy],stencil)+srcFunc[ix][iy])
      )
    ),
  /* Left skin cells */
  stencil : subst(slist,
    getLaplacianStencil2(bc, dx[1], dx[2], polyOrder, assoc(value,bcLeft), fC, fR, fB, fT,
      [1,0], [0,0])
    ),
  for ix : 1 thru 1 do (
    for iy : 2 thru NY-1 do (
      eqnList : append(eqnList, subst([i=ix,j=iy],stencil)+srcFunc[ix][iy])
      )
    ),
  /* Right skin cells */
  stencil : subst(slist,
    getLaplacianStencil2(bc, dx[1], dx[2], polyOrder, fL, fC, assoc(value,bcRight), fB, fT,
      [0,1], [0,0])
    ),
  for ix : NX thru NX do (
    for iy : 2 thru NY-1 do (
      eqnList : append(eqnList, subst([i=ix,j=iy],stencil)+srcFunc[ix][iy])
      )
    ),
  /* Bottom skin cells */
  stencil : subst(slist,
    getLaplacianStencil2(bc, dx[1], dx[2], polyOrder, fL, fC, fR, assoc(value,bcBottom), fT,
      [0,0], [1,0])
    ),
  for ix : 2 thru  NX-1 do (
    for iy : 1 thru 1 do (
      eqnList : append(eqnList, subst([i=ix,j=iy],stencil)+srcFunc[ix][iy])
      )
    ),  
  /* Top skin cells */
  stencil : subst(slist,
    getLaplacianStencil2(bc, dx[1], dx[2], polyOrder, fL, fC, fR, fB, assoc(value,bcTop),
      [0,0], [0,1])
    ),
  for ix : 2 thru  NX-1 do (
    for iy : NY thru NY do (
      eqnList : append(eqnList, subst([i=ix,j=iy],stencil)+srcFunc[ix][iy])
      )
    ),
  
  /* Bottom-left */
  stencil : subst(slist,
    getLaplacianStencil2(bc, dx[1], dx[2], polyOrder, assoc(value,bcLeft), fC, fR, assoc(value,bcBottom), fT,
      [1,0], [1,0])
    ),
  eqnList : append(eqnList, subst([i=1,j=1],stencil)+srcFunc[1][1]),
  /* Top-left */
  stencil : subst(slist,
    getLaplacianStencil2(bc, dx[1], dx[2], polyOrder, assoc(value,bcLeft), fC, fR, fB, assoc(value,bcTop),
      [1,0], [0,1])
    ),
  eqnList : append(eqnList, subst([i=1,j=NY],stencil)+srcFunc[1][NY]),
  /* Bottom-right */
  stencil : subst(slist,
    getLaplacianStencil2(bc, dx[1], dx[2], polyOrder, fL, fC, assoc(value,bcRight), assoc(value,bcBottom), fT,
      [0,1], [1,0])
    ),
  eqnList : append(eqnList, subst([i=NX,j=1],stencil)+srcFunc[NX][1]),
  /* Top-right */
  stencil : subst(slist,
    getLaplacianStencil2(bc, dx[1], dx[2], polyOrder, fL, fC, assoc(value,bcRight), fB, assoc(value,bcTop),
      [0,1], [0,1])
    ),
  eqnList : append(eqnList, subst([i=NX,j=NY],stencil)+srcFunc[NX][NY]),
  
  /* List of unknowns */
  varList : [],
  for i : 1 thru NX do (
    for j : 1 thru NY do (
      varList : append(varList, makelist(f[i,j,k],k,1,NC))
      )
    ),
  /* Solve linear system */
  fSol : linsolve(eqnList, varList),
  /* Return solution field */
  return (
    subst(fSol,
      makelist(
        makelist(
          makelist(f[i,j,k],k,1,NC),
          j, 1, NY),
        i, 1, NX))
    )
  )$