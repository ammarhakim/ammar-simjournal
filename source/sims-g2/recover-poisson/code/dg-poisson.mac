/* Poisson solver based on recovery approach */

load("modal-basis")$
load("basis-precalc/basisSer1x")$
load("recovery")$

/* Function to make agruments to draw2d() function */
createArgListDgSol(dgField, clr, xL, xR) := block([dx,argList,xj,N],
  N : length(dgField),
  dx : (xR-xL)/N,
  argList : [grid=true, color=clr],
  for i : 1 thru N do (
    xj : xL+(i-1/2)*dx,
    argList : endcons(explicit(
        dgField[i].subst(x=(z-xj)/(dx/2),bc),z,xL+(i-1)*dx,xL+i*dx),
      argList)
    ),
  return(argList)
  )$

/* Function to project function on DG basis */
projectOnBasisGrid(func, bc, xL, xR, N) := block([dx],
  dx : (xR-xL)/N,
  return (
    makelist(
      calcInnerProdList([x],1,bc,
        subst(z=x*dx/2+(xL+(i-1/2)*dx), apply(func, [z]))),
      i, 1, N)
    )
  )$

/* Function to subtract value from first element in list of list */
subVal(dgField, val) := block([outList],
  outList : copylist(dgField),
  for i : 1 thru length(dgField) do (
    outList[i][1] : dgField[i][1]-val
    ),
  return(outList)
  )$

/* Function to compute L2 norm of field */
calcL2Norm(dgField, dx) := sqrt(dx*sum(sum(dgField[i][k]^2,k,1,length(dgField[1])), i, 1, length(dgField)))$

/* Function to compute Laplacian stencil in 1D for deep interior cell */
getLaplacianStencil(polyOrder, fL, fC, fR) := calcInnerProdList([x], 1,
  basisC[polyOrder],
  diff(calcRecov1CellGen("Ser", x, [2], polyOrder, 1, ["exp", fL], fC, ["exp", fR]), x,2)
  )$

/* Function to compute Laplacian stencil in 1D: uses constrained recovery. side=left/right */
getLaplacianSkinStencil(side, polyOrder, fL, fR, [bc]) := block([bcL,xc,lims],
  lims : if side = 'left then [-2,0] else [0,2], /* Cell to project on */
  xc : if side = 'left then -1 else 1, /* Center of cell to project on */
  bcL : etaDir(x, xc, 2, basisC[polyOrder]),
  return (
    calcInnerProdListGen([x], [lims], 1, bcL,
      diff(calcRecov2CellGen("Ser", x, [2], polyOrder, fL, fR, bc[1], bc[2]), x,2)
      )
    )
  )$

/* Function to compute Laplacian stencil in 1D: uses constrained recovery */
getLaplacianFirstInteriorStencil(polyOrder, fL, fC, fR, [bc]) := calcInnerProdList([x], 1,
  basisC[polyOrder],
  diff(
    calcRecov1CellGen("Ser", x, [2], polyOrder, 1, ["exp", fL], fC, ["exp", fR], bc[1], bc[2]),
    x,2)
  )$

/* Transform to [-1,1] */
xe(eta,dx,xj)  := eta*dx/2+xj$

/*
* grid: grid(lower=xl, upper=xr,cells=N,isPeriodic=false)
*
*    isPeriodic is optional
*
* bcLeft/bcRight: BC(type=1, value=0)
*
*    type can be 1 (Dirichlet) or 2 (Neumann). Value muust be a number
*/
solvePoissonEquation(grid, polyOrder, srcFunc, bcLeft, bcRight) := block(
  /* Declare local variables */
  [
  bc, NC, xL, xR, dx, nmax, slist, stencil, eqnList,
  varList, fsol, isPeriodic,
  bcType, bcValue, bcLeftList, bcRightList,
  srcMean
  ],
  
  bc : basisC[polyOrder],
  NC : length(bc),
  xL : assoc(lower,grid),
  xR : assoc(upper,grid),
  nmax : assoc(cells,grid),
  dx : (xR-xL)/nmax, /* Cell spacing */
  
  /* Source function on [-1,1] */
  srcFuncHat(eta,dx,xj) := srcFunc(xe(eta,dx,xj)),
  /* Check if periodic direction */
  isPeriodic : assoc(isPeriodic,grid),
  /* Substitution list for indexing ... */
  slist : append(
    /* x-direction for f ... */
    makelist(fL[k]=f[i-1,k],k,1,NC),
    makelist(fC[k]=f[i,k],k,1,NC),
    makelist(fR[k]=f[i+1,k],k,1,NC)
    ),
  /* ... for periodic BCs */
  pBc : append(
    /* for f ... */
    makelist(f[0,k]=f[nmax,k],k,1,NC),
    makelist(f[nmax+1,k]=f[1,k],k,1,NC)
    ),
  
  /* Construct list of equations */
  if isPeriodic then (
    srcMean : integrate(srcFunc(x),x,xL,xR)/(xR-xL),
    /* Interior stencil */
    stencil : subst(slist,
      getLaplacianStencil(polyOrder, fL, fC, fR)
      ),
    eqnList : [], /* List of equations */
    /* Construct set of linear equations for interior */
    for j : 1 thru nmax do (
      eqnList : append(eqnList,
        4/dx^2*subst(i=j,stencil)-calcInnerProdList([x],1,bc,-(srcFuncHat(x,dx,xL+(j-1/2)*dx)-srcMean))
        )
      ),
    /* Apply periodic BCs */
    eqnList : subst(pBc, eqnList),
    /* Set cell-average term in first skin cell to zero to avoid singular inversion */
    eqnList : rest(append(eqnList, [f[1,1]=0])) /* remove one equation */
    )
  else (
    /* Create left/right BC lists (also needed for skin/first-interior cells) */
    bcType : assoc(type,bcLeft),
    bcValue : assoc(value,bcLeft),
    bcLeftList : if bcType = 1 then [1,0,bcValue] else [0,1,bcValue],
    
    bcType : assoc(type,bcRight),
    bcValue : assoc(value,bcRight),
    bcRightList : if bcType = 1 then [1,0,bcValue] else [0,1,bcValue],

    eqnList : [], /* List of equations */
    /* Interior stencil */
    stencil : subst(slist,
      getLaplacianStencil(polyOrder, fL, fC, fR)
      ),
    /* Construct set of linear equations for interior */
    for j : 3 thru nmax-2 do (
      eqnList : append(eqnList,
        4/dx^2*subst(i=j,stencil)-calcInnerProdList([x],1,bc,-srcFuncHat(x,dx,xL+(j-1/2)*dx))
        )
      ),
    if nmax > 3 then (
      /* First-interior cell on left */
      stencil : subst(slist,
        getLaplacianFirstInteriorStencil(polyOrder, fL, fC, fR, bcLeftList, [0,0,0])
        ),
      eqnList : append(eqnList,
        4/dx^2*subst(i=2,stencil)-calcInnerProdList([x],1,bc,-srcFuncHat(x,dx,xL+(2-1/2)*dx))
        ),
      /* First-interior cell on right */
      stencil : subst(slist,
        getLaplacianFirstInteriorStencil(polyOrder, fL, fC, fR, [0,0,0], bcRightList)
        ),
      eqnList : append(eqnList,
        4/dx^2*subst(i=nmax-1,stencil)-calcInnerProdList([x],1,bc,-srcFuncHat(x,dx,xL+(nmax-1-1/2)*dx))
        )
      ),
    if nmax = 3 then (
      /* Match both left/right BC values */
      stencil : subst(slist,
        getLaplacianFirstInteriorStencil(polyOrder, fL, fC, fR, bcLeftList, bcRightList)
        ),
      eqnList : append(eqnList,
        4/dx^2*subst(i=2,stencil)-calcInnerProdList([x],1,bc,-srcFuncHat(x,dx,xL+(2-1/2)*dx))
        )
      ),
    
    /* Left skin cell */
    stencil : subst(slist,
      getLaplacianSkinStencil('left, polyOrder, fC, fR, bcLeftList, [0,0,0])
      ),
    eqnList : append(eqnList,
      4/dx^2*subst(i=1,stencil)-calcInnerProdList([x],1,bc,-srcFuncHat(x,dx,xL+(1-1/2)*dx))
      ),
    
    /* Right skin cell */
    stencil : subst(slist,
      getLaplacianSkinStencil('right, polyOrder, fL, fC, [0,0,0], bcRightList)
      ),
    eqnList : append(eqnList,
      4/dx^2*subst(i=nmax,stencil)-calcInnerProdList([x],1,bc,-srcFuncHat(x,dx,xL+(nmax-1/2)*dx))
      )
    ),
  
  /* List of unknowns */
  varList : [],
  for i : 1 thru nmax do (
    varList : append(varList, makelist(f[i,k],k,1,NC))
    ),  
  /* Return solution field */
  /* Solve linear system */
  fSol : linsolve(eqnList, varList),
  /* Return solution field */
  return (
    subst(fSol, makelist(makelist(f[i,k],k,1,NC), i, 1, nmax))
    )
  )$




