file_search_maxima: append(file_search_maxima,
  [
  "/Users/ahakim/research/ammar-simjournal/sims-g2/recover-poisson/code/###.{lisp,mac}"
  ])$


load("dg-poisson")$

polyOrder : 1$
/* Left/right domain boundary */
xL : 0$
xR : 1$
nmax : 8$
dx : (xR-xL)/nmax$
bc : basisC[polyOrder]$

/* Exact solution ... */
exactSol(z) := z*(z-1)*sin(2*%pi*z)$
/* .. source term corresponding to it */
_src : -diff(exactSol(z),z,2)$
define(srcFunc(z), _src)$

/* Solve Poisson equation */
solList : solvePoissonEquation(
  grid(lower=xL, upper=xR, cells=nmax),
  polyOrder, srcFunc,
  BC(type=1, value=0), BC(type=1, value=0)
  )$

/* Commands to plot solution */
drawCmd : createArgListDgSol(solList, red, xL, xR)$
/* Commands to plot exact solution*/
exactSmoothCmd : append(drawCmd, [color=blue, explicit(exactSol(z),z,xL,xR)])$
/* Command to plot projection of exact solution */
exactProj : projectOnBasisGrid(exactSol, bc, xL, xR, nmax)$
exactProjCmd : createArgListDgSol(exactProj, black, xL, xR)$

/* Plot solution */
apply(draw2d, append(drawCmd, exactSmoothCmd, exactProjCmd))$

/* Compute L2 norm of error */
err : float(calcL2Norm(exactProj-solList,dx))$