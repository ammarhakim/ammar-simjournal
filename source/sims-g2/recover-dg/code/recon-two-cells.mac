load("modal-basis")$
load("basis-precalc/basisSer1x")$
assume(dx>0)$

eta(xc,dx,b) := subst(z=x,
  subst(x=(z-xc)/(dx/2), b))$

/* Flags to indicate what we are matching (one can match both) */
matchSlope : true $
matchValue : true $

/* Reconstruction across two cells of size dx each */
bCC : basisC[1]$ 

pL : eta(-dx/2,dx,bCC)$
pR : eta(dx/2,dx,bCC)$

N : length(bCC)$
h : doExpand1(hn, makelist(x^i,i,0,2*N-1))$
eqL : calcInnerProdListGen([x], [[-dx,0]], 1, pL, h-doExpand(hL,pL))$
eqR : calcInnerProdListGen([x], [[0,dx]],  1, pR, h-doExpand(hR,pR))$
eqList : append(eqL,eqR)$
hsol : linsolve(eqList, makelist(hn[i], i, 0, 2*N-1))$
h1d : fullratsimp(subst(hsol, h))$

/* Basis function in two  cells: L,R */
bCL : eta(-dx/2,dx,bCC)$
bCR : eta(dx/2,dx,bCC)$

/* Compute recovery poly from left/right expansion coefficients */
calcReconFromExpansions(gL, gR) := expand(
  fullratsimp(subst(append(
        makelist(hL[i]=gL[i],i,1,N),
        makelist(hR[i]=gR[i],i,1,N)),
      h1d)))$

/* Recovery poly of a function */
calcRecon(g) := calcReconFromExpansions(
  calcInnerProdListGen([x], [[-dx,0]], 1, bCL, g)*2/dx,
  calcInnerProdListGen([x], [[0,dx]], 1, bCR, g)*2/dx
  )$

/* Taylor series analysis */
taylorExpand(df,N,z) := df[0] + sum(df[i]*z^i/factorial(i), i, 1, N)$
ft : taylorExpand(df, 10, x)$
ft1d : calcRecon(ft)$

/* Value and derivative errors at x=0 */
ft1d_v : subst(x=0,diff(ft-ft1d,x,0))$
ft1d_d : subst(x=0,diff(ft-ft1d,x,1))$

calcTaylorCoeff(g) := makelist(subst(x=0,
    df[i] = diff(g,x,i)), i, 0, 20)$

plotRecon(g,dx) := block([gL,gI,gR,ge,r1ge,gLe,gIe,gRe],
  gL : calcInnerProdListGen([x], [[-dx, 0]], 1, bCL, g)*2/dx,
  gR : calcInnerProdListGen([x], [[0, dx]], 1, bCR, g)*2/dx,
  ge : explicit(g, x, -dx, dx),
  r1ge : explicit(calcRecon(g), x, -dx, dx),
  gLe : explicit(gL.bCL, x, -dx, 0),
  gRe : explicit(gR.bCR, x, 0, dx),
  draw2d(
    grid=true,
    color=red, r1ge,
    color=black,gLe,
    color=black,gRe,
    color=blue,line_type=dots,ge
    )
  )$

