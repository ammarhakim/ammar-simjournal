<%!
  import glob
  def makeRst(lua, lang):
    extension = "lua"

    if lang == "lua":
      extension = "lua"
    elif lang == "python":
      extension = "py"

    fls = glob.glob("%s/%s-*.%s" % (lua, lua, extension))
    if (len(fls)>0):
      return fls[0][:fls[0].find(".")]
    return ""
%>
<%def name="mdl(sim, lang='lua')"><% luaFl = makeRst(sim, lang) %>:doc:`${sim} <${luaFl}>` </%def>

Simulation Index
================

Following is a list of simulation numbers with one-line
descriptions. Click on the simulation number to see the complete Lua
program for that simulation.

.. list-table::
  :header-rows: 1
  :widths: 10,90

  * - Number
    - Description
  * - ${mdl("s1")}
    - Poisson solve on a 2D periodic grid, with Gaussian source
  * - ${mdl("s2")}
    - Poisson solve on a 2D periodic grid, with anisotropic Gaussian source
  * - ${mdl("s3")}
    - Poisson solve on a 2D periodic grid, with source a sum of two Gaussians
  * - ${mdl("s4")}
    - Same as s3, but with different grid spacing in X and Y.
  * - ${mdl("s5")}
    - 1D Euler Sod-shock with sonic point in rarefaction. Wave-propagation algorithm.
  * - ${mdl("s6")}
    - Exact solution to s5.
  * - ${mdl("s7")}
    - Same as s5, except using the MUSCL-Hancock scheme.
  * - ${mdl("s8")}
    - 1D Euler shock with low density/pressure region. Wave-propagation scheme.
  * - ${mdl("s9")}
    - Exact solution to s8.
  * - ${mdl("s10")}
    - Same as s8, except using the MUSCL-Hancock scheme.
  * - ${mdl("s11")}
    - 1D Noh problem. Wave-propagation algorithm.
  * - ${mdl("s12")}
    - Exact solution to s11.
  * - ${mdl("s13")}
    - Same as s11, except using the MUSCL-Hancock scheme.
  * - ${mdl("s14")}
    - 1D Euler shock with a stationary contact discontinuity. Wave-propagation scheme.
  * - ${mdl("s15")}
    - Exact solution to s14
  * - ${mdl("s16")}
    - Same as s14, except using the MUSCL-Hancock scheme.
  * - ${mdl("s17")}
    - 1D Euler shock with two strong shocks. Wave-propagation scheme.
  * - ${mdl("s18")}
    - Exact solution to s17
  * - ${mdl("s19")}
    - Same as s17, except using the MUSCL-Hancock scheme.
  * - ${mdl("s20")}
    - 1D Euler with stationary contact discontinuity. Wave-propagation scheme.
  * - ${mdl("s21")}
    - Exact solution to s20
  * - ${mdl("s22")}
    - Same as s20, except using the MUSCL-Hancock scheme.
  * - ${mdl("s23")}
    - 1D Euler with slowly moving contact discontinuity. Wave-propagation scheme.
  * - ${mdl("s24")}
    - Exact solution to s23
  * - ${mdl("s25")}
    - Same as s23, except using the MUSCL-Hancock scheme.
  * - ${mdl("s26")}
    - 1D Euler with sharp spike in density. Wave-propagation scheme.
  * - ${mdl("s27")}
    - Exact solution to s26
  * - ${mdl("s28")}
    - Same as s26, except using the MUSCL-Hancock scheme.
  * - ${mdl("s29")}
    - 1D Euler Woodward-Collela blast wave problem. Wave-propagation scheme.
  * - ${mdl("s30")}
    - Same as s29 run with higher-resolution to serve as an "exact" solution.
  * - ${mdl("s31")}
    - Same as s29, except using the MUSCL-Hancock scheme.
  * - ${mdl("s32")}
    - Slab RTE with Mie scattering with :math:`L=8`.
  * - ${mdl("s33")}
    - Slab RTE with Haze-L phase function with :math:`L=82`.
  * - ${mdl("s34")}
    - Same as s33 but with :math:`\mu_0=0.5`.
  * - ${mdl("s35")}
    - Same as s33 but with :math:`\varpi=1.0`.
  * - ${mdl("s36")}
    - Two-fluid shock problem with :math:`q_i/m_i = 1.0`.
  * - ${mdl("s37")}
    - Two-fluid shock problem with :math:`q_i/m_i = 10.0`.
  * - ${mdl("s38")}
    - Two-fluid shock problem with :math:`q_i/m_i = 100.0`
  * - ${mdl("s39")}
    - Two-fluid shock problem with :math:`q_i/m_i = 1000.0`
  * - ${mdl("s40")}
    - Dispersive Euler equations with :math:`\omega_c = 10` and 100 cells.
  * - ${mdl("s41", "python")}
    - Exact solution of dispersive Euler equations.
  * - ${mdl("s42")}
    - Dispersive Euler equations with :math:`\omega_c = 10` and 200 cells.
  * - ${mdl("s43")}
    - Dispersive Euler equations with :math:`\omega_c = 10` and 300 cells.
  * - ${mdl("s44")}
    - Dispersive Euler equations with :math:`\omega_c = 10` and 400 cells.
  * - ${mdl("s45")}
    - Dispersive Euler equations with :math:`\omega_c = 100` and 200 cells.
  * - ${mdl("s46")}
    - Dispersive Euler equations with :math:`\omega_c = 100` and 400 cells.
  * - ${mdl("s47")}
    - Sod-shock for dispersive Euler equations.
  * - ${mdl("s48")}
    - Same as s45 but larger time-step.
  * - ${mdl("s49")}
    - Wave-propagation scheme for Maxwell equation TM (8,5) mode, :math:`80\times 40` grid.
  * - ${mdl("s50")}
    - Same as s49 but with :math:`160\times 80` grid.
  * - ${mdl("s51")}
    - Same as s49 but with :math:`240\times 120` grid.
  * - ${mdl("s52")}
    - Same as s49 but with :math:`320\times 160` grid.
  * - ${mdl("s53")}
    - FDTD scheme for Maxwell equation TM (8,5) mode, :math:`80\times 40` grid.
  * - ${mdl("s54")}
    - Same as s53 but with :math:`160\times 80` grid.
  * - ${mdl("s55")}
    - Same as s53 but with :math:`240\times 120` grid.
  * - ${mdl("s56")}
    - Same as s53 but with :math:`320\times 160` grid.
  * - ${mdl("s57")}
    - Pulse in metal box with wave-propagation scheme.
  * - ${mdl("s58")}
    - Pulse in metal box with FDTD scheme.
  * - ${mdl("s59")}
    - Same as s58 but using a :math:`400 \times 400` grid.
  * - ${mdl("s60")}
    - Same as s58 but using a :math:`400 \times 400` grid.
  * - ${mdl("s61")}
    - 1D Riemann problem with wave-propagation scheme.
  * - ${mdl("s62")}
    - 1D Riemann problem with FDTD scheme.
  * - ${mdl("s63")}
    - FDTD scheme on dual Yee-cell for Maxwell equation TM (8,5) mode,
      :math:`80\times 40` grid.
  * - ${mdl("s64")}
    - FDTD scheme on dual Yee-cell for Maxwell equation. Pulse problem.
  * - ${mdl("s65")}
    - Plasma wave beach problem, without the plasma. Using 100 cells.
  * - ${mdl("s66")}
    - Plasma wave beach problem, without the plasma. Using 200 cells.
  * - ${mdl("s67")}
    - Plasma wave beach problem using 100 cells.
  * - ${mdl("s68")}
    - Plasma wave beach problem using 200 cells.
  * - ${mdl("s69")}
    - Plasma wave beach problem using 400 cells.
  * - ${mdl("s70")}
    - Plasma wave beach problem using 800 cells.
  * - ${mdl("s71")}
    - Plasma wave beach problem using 1600 cells.
  * - ${mdl("s72")}
    - Tunneling through an electron-cyclotron cutoff layer, 200 cells
  * - ${mdl("s73")}
    - Tunneling through an electron-cyclotron cutoff layer, 400 cells
  * - ${mdl("s74")}
    - Ion-cyclotron wave propagation in a 1D tokamak-like configuration, 400 cells.
  * - ${mdl("s75")}
    - Ion-cyclotron wave propagation in a 1D tokamak-like configuration, 200 cells.
      This simulation does not work very well as the resolution is too low.
  * - ${mdl("s76")}
    - Ion-cyclotron wave propagation in a 1D tokamak-like configuration, 
      low-field incidence.
  * - ${mdl("s77")}
    - 1D Poisson convergence test with 8 elements.
  * - ${mdl("s78")}
    - 1D Poisson convergence test with 16 elements.
  * - ${mdl("s79")}
    - 1D Poisson convergence test with 32 elements.
  * - ${mdl("s80")}
    - 1D Poisson convergence test with 64 elements.
  * - ${mdl("s81")}
    - 1D Poisson convergence test with 8 elements and Dirichlet/Neumann Bcs.
  * - ${mdl("s82")}
    - 1D Poisson convergence test with 16 elements and Dirichlet/Neumann Bcs.
  * - ${mdl("s83")}
    - 1D Poisson convergence test with 32 elements and Dirichlet/Neumann Bcs.
  * - ${mdl("s84")}
    - 1D Poisson convergence test with 64 elements and Dirichlet/Neumann Bcs.
  * - ${mdl("s85")}
    - 2D Poisson convergence test with :math:`8\times 8` elements.
  * - ${mdl("s86")}
    - Same as s86, except with :math:`16 \times 16` elements.
  * - ${mdl("s87")}
    - Same as s86, except with :math:`32 \times 32` elements.
  * - ${mdl("s88")}
    - Same as s86, except with :math:`64 \times 64` elements.
  * - ${mdl("s89")}
    - 1D Poisson convergence test, 3rd order scheme, with 4 elements.
  * - ${mdl("s90")}
    - 1D Poisson convergence test, 3rd order scheme, with 8 elements.
  * - ${mdl("s91")}
    - 1D Poisson convergence test, 3rd order scheme, with 16 elements.
  * - ${mdl("s92")}
    - 1D Poisson convergence test, 3rd order scheme, with 32 elements.
  * - ${mdl("s93")}
    - 1D Poisson convergence test, 4th order scheme, with 2 elements.
  * - ${mdl("s94")}
    - 1D Poisson convergence test, 4th order scheme, with 4 elements.
  * - ${mdl("s95")}
    - 1D Poisson convergence test, 4th order scheme, with 8 elements.
  * - ${mdl("s96")}
    - 1D Poisson convergence test, 4th order scheme, with 16 elements.
  * - ${mdl("s97")}
    - 2D Poisson convergence test, 3rd order scheme, with :math:`4\times 4` elements.
  * - ${mdl("s98")}
    - 2D Poisson convergence test, 3rd order scheme, with :math:`8\times 8` elements.
  * - ${mdl("s99")}
    - 2D Poisson convergence test, 3rd order scheme, with :math:`16\times 16` elements.
  * - ${mdl("s100")}
    - 2D Poisson convergence test, 3rd order scheme, with :math:`32\times 32` elements.
  * - ${mdl("s101")}
    - 2D Poisson convergence test with periodic BCs and :math:`32\times 32` elements
  * - ${mdl("s102")}
    - 2D Poisson convergence test with periodic BCs and :math:`64\times 64` elements
  * - ${mdl("s103")}
    - 2D Poisson convergence test with periodic BCs and :math:`128\times 128` elements
  * - ${mdl("s104")}
    - Temporal convergence study of Poisson bracket with Gaussian pulse. CFL 0.2.
  * - ${mdl("s105")}
    - Temporal convergence study of Poisson bracket with Gaussian pulse. CFL 0.1.
  * - ${mdl("s106")}
    - Temporal convergence study of Poisson bracket with Gaussian pulse. CFL 0.05.
  * - ${mdl("s107")}
    - Temporal convergence study of Poisson bracket with Gaussian pulse. CFL 0.025.
  * - ${mdl("s108")}
    - Same as s104, except with RK3 time-stepping.
  * - ${mdl("s109")}
    - Same as s108. CFL 0.1.
  * - ${mdl("s110")}
    - Same as s108. CFL 0.05.
  * - ${mdl("s111")}
    - Same as s108. CFL 0.025.
  * - ${mdl("s112")}
    - Convergence of Poisson bracket algorithm with 2nd order scheme, :math:`32\times 32` grid.
  * - ${mdl("s113")}
    - Convergence of Poisson bracket algorithm with 2nd order scheme, :math:`64\times 64` grid.
  * - ${mdl("s114")}
    - Convergence of Poisson bracket algorithm with 2nd order scheme, :math:`128\times 128` grid.
  * - ${mdl("s115")}
    - Convergence of Poisson bracket algorithm with 3rd order scheme, :math:`8\times 8` grid.
  * - ${mdl("s116")}
    - Same as s115, except with :math:`16\times 16` grid.
  * - ${mdl("s117")}
    - Same as s115, except with :math:`32\times 32` grid.
  * - ${mdl("s118")}
    - Rigid-body rotation problem for Poisson bracket, with :math:`32\times 32` grid.
  * - ${mdl("s119")}
    - Same as s118, except on :math:`64\times 64` grid.
  * - ${mdl("s120")}
    - Same as s118, except with 3-order spatial scheme.
  * - ${mdl("s121")}
    - Swirling flow problem with 3-order spatial scheme on :math:`32\times 32` grid.
  * - ${mdl("s122")}
    - Same as s115 for testing enstrophy convergence. CFL of 0.2, central flux.
  * - ${mdl("s123")}
    - Same as s122 for testing enstrophy convergence. CFL of 0.1, central flux.
  * - ${mdl("s124")}
    - Same as s122 for testing enstrophy convergence. CFL of 0.05, central flux.
  * - ${mdl("s125")}
    - Double shear problem, on :math:`64\times 64` grid, DG 2, upwind fluxes.
  * - ${mdl("s126")}
    - Same as s125, except with :math:`128\times 128` grid points.
  * - ${mdl("s127")}
    - Same as s125, except with DG3 scheme.
  * - ${mdl("s128")}
    - Same as s126, except with DG3 scheme.
  * - ${mdl("s129")}
    - Same as s125, except with CFL of 0.1.
  * - ${mdl("s130")}
    - Same as s130, except with CFL of 0.05.
  * - ${mdl("s131")}
    - Same as s125, except with a central flux.
  * - ${mdl("s132")}
    - Same as s125, except with CFL of 0.1
  * - ${mdl("s133")}
    - Same as s125, except with CFL of 0.05
  * - ${mdl("s134")}
    - Vortex waltx problem, :math:`64 \times 64` grid.
  * - ${mdl("s135")}
    - Vortex waltx problem, :math:`128 \times 128` grid.
  * - ${mdl("s136")}
    - Vortex waltx problem, :math:`256 \times 256` grid.
  * - ${mdl("s137")}
    - Vortex waltx problem, DG3, :math:`32 \times 32` grid.
  * - ${mdl("s138")}
    - Vortex waltx problem, DG3, :math:`64 \times 64` grid.
  * - ${mdl("s139")}
    - Vortex waltx problem, DG3, :math:`128 \times 128` grid.
  * - ${mdl("s140")}
    - Vortex waltz problem, :math:`64 \times 64` grid with central flux, CFL 0.2
  * - ${mdl("s141")}
    - Vortex waltz problem, :math:`64 \times 64` grid with central flux, CFL 0.1
  * - ${mdl("s142")}
    - Vortex waltz problem, :math:`64 \times 64` grid with central flux, CFL 0.05
  * - ${mdl("s143")}
    - Vlasov free-streaming operator test. DG2, upwind flux on :math:`64 \times 64` grid.
  * - ${mdl("s144")}
    - Vlasov free-streaming operator test. DG2, upwind flux on :math:`32 \times 8` grid.
  * - ${mdl("s145")}
    - Vlasov free-streaming operator test. DG2, upwind flux on :math:`32 \times 16` grid.
  * - ${mdl("s146")}
    - Vlasov free-streaming operator test. DG3, upwind flux on :math:`32 \times 8` grid.
  * - ${mdl("s147")}
    - Vlasov free-streaming operator test. DG3, upwind flux on :math:`32 \times 16` grid.
  * - ${mdl("s148")}
    - Vlasov in potential well. DG2, upwind flux on :math:`32 \times 64` grid.
  * - ${mdl("s149")}
    - Vlasov in potential well. DG2, upwind flux on :math:`64 \times 128` grid.
  * - ${mdl("s150")}
    - Vlasov in quadratic potential well. DG2, upwind flux on :math:`64 \times 128` grid.
  * - ${mdl("s151")}
    - Vlasov-Poisson, Landau damping :math:`k=0.5`, :math:`T_e = 1.0`.
  * - ${mdl("s152")}
    - Same as s151, except :math:`T_e = 0.5`.
  * - ${mdl("s153")}
    - Same as s151, except :math:`T_e = 0.6`.
  * - ${mdl("s154")}
    - Same as s151, except :math:`T_e = 0.75`.
  * - ${mdl("s155")}
    - Same as s151, except :math:`T_e = 1.25`.
  * - ${mdl("s156")}
    - Same as s151, except :math:`T_e = 1.5`.
  * - ${mdl("s157")}
    - Same as s151, except :math:`T_e = 1.75`.
  * - ${mdl("s158")}
    - Same as s151, except :math:`T_e = 1.8`.
  * - ${mdl("s159")}
    - Same as s151, except :math:`T_e = 1.9`.
  * - ${mdl("s160")}
    - Same as s151, except :math:`T_e = 2.0`.
  * - ${mdl("s161")}
    - Same as s151, except :math:`T_e = 2.2`.
  * - ${mdl("s162")}
    - Same as s151, except :math:`\alpha=0.5`. (Nonlinear Landau damping)
  * - ${mdl("s163")}
    - Vlasov-Poisson, Landau damping :math:`k=\sqrt{0.08}`, :math:`T_e = 1.0` on a large domain.
  * - ${mdl("s164")}
    - Same as s163, except :math:`k=\sqrt{0.1}`.
  * - ${mdl("s165")}
    - Same as s163, except :math:`k=\sqrt{0.12}`.
  * - ${mdl("s166")}
    - Same as s163, except :math:`k=\sqrt{0.06}`.
  * - ${mdl("s167")}
    - Same as s163, except :math:`k=0.25`.
  * - ${mdl("s168")}
    - Same as s163, except :math:`k=0.5`.
  * - ${mdl("s169")}
    - Same as s163, except :math:`k=0.75`.
  * - ${mdl("s170")}
    - Same as s163, except :math:`k=1.0`.
  * - ${mdl("s171")}
    - Same as s163, except :math:`k=2.5`.
  * - ${mdl("s172")}
    - Ion-acoustic waves with quasi-neutrality condition and :math:`T_i/T_e = 0.1`.
  * - ${mdl("s173")}
    - Ion-acoustic waves with quasi-neutrality condition and :math:`T_i/T_e = 0.5`.
  * - ${mdl("s174")}
    - Ion-acoustic waves with quasi-neutrality condition and :math:`T_i/T_e = 0.75`.
  * - ${mdl("s175")}
    - Ion-acoustic waves with quasi-neutrality condition and :math:`T_i/T_e = 1.0`.
  * - ${mdl("s176")}
    - Ion-acoustic waves with quasi-neutrality condition and :math:`T_i/T_e = 1.5`.
  * - ${mdl("s177")}
    - Ion-acoustic waves with quasi-neutrality condition and :math:`T_i/T_e = 2.0`.
  * - ${mdl("s178")}
    - Ion-acoustic waves with quasi-neutrality condition and :math:`T_i/T_e = 0.3`.
  * - ${mdl("s179")}
    - Vlasov-Poisson simulation to test momentum conservation, :math:`8\times 128` cells.
  * - ${mdl("s180")}
    - Same as s179, except :math:`8\times 32` cells.
  * - ${mdl("s181")}
    - Same as s179, except :math:`16\times 128` cells.
  * - ${mdl("s182")}
    - Same as s179, except :math:`32\times 128` cells.
  * - ${mdl("s183")}
    - Same as s179 except, :math:`64\times 128` cells.
  * - ${mdl("s184")}
    - Vlasov-Poisson simulation to test energy conservation, :math:`16\times 32` cells, CFL 0.3.
  * - ${mdl("s185")}
    - Same as s184, except CFL :math:`0.3/2`
  * - ${mdl("s186")}
    - Same as s184, except CFL :math:`0.3/4`
  * - ${mdl("s187")}
    - Same as s184, except CFL :math:`0.3/8`
  * - ${mdl("s188")}
    - Same as s179, except :math:`16\times 32` cells.
  * - ${mdl("s189")}
    - Same as s179, except :math:`16\times 64` cells.
  * - ${mdl("s190")}
    - Same as s179, except :math:`16\times 128` cells.
  * - ${mdl("s191")}
    - Same as s179 except, :math:`128\times 128` cells.
  * - ${mdl("s192")}
    - Vlasov-Poisson simulation to test energy conservation, :math:`16\times 32` cells, CFL 0.2, DG3.
  * - ${mdl("s193")}
    - Same as s192, except CFL :math:`0.1`.
  * - ${mdl("s194")}
    - Same as s192, except CFL :math:`0.05`.
  * - ${mdl("s195")}
    - Same as s192, except CFL :math:`0.025`.
  * - ${mdl("s196")}
    - Vlasov-Poisson simulation to test momentum conservation, :math:`8\times 128` cells, DG3
  * - ${mdl("s197")}
    - Same as s196, except :math:`16\times 128` cells.
  * - ${mdl("s198")}
    - Same as s196, except :math:`32\times 128` cells.
  * - ${mdl("s199")}
    - Same as s196, except :math:`64\times 128` cells.
  * - ${mdl("s200")}
    - Same as s196, except :math:`128\times 128` cells.
  * - ${mdl("s201")}
    - Rigid-body flow with nodal DG updater, :math:`16\times 16` cells.
  * - ${mdl("s202")}
    - Rigid-body flow with nodal DG updater, :math:`32\times 32` cells.
  * - ${mdl("s203")}
    - Rigid-body flow with nodal DG updater, :math:`64\times 64` cells.
  * - ${mdl("s204")}
    - Rigid-body flow with nodal DG updater polyOrder 2, :math:`32\times 32` cells.
  * - ${mdl("s205")}
    - Swirling flow with nodal DG updater polyOrder 2, :math:`32\times 32` cells.
  * - ${mdl("s206")}
    - Helical flow with nodal DG updater polyOrder 2, :math:`16\times 16\times 16` cells.
  * - ${mdl("s207")}
    - Advection-diffusion test, 8 cells
  * - ${mdl("s208")}
    - Advection-diffusion test, 16 cells
  * - ${mdl("s209")}
    - Advection-diffusion test, 32 cells
  * - ${mdl("s210")}
    - Advection-diffusion test, 64 cells
  * - ${mdl("s211")}
    - Advection-diffusion test, 8 cells, 3-point flux
  * - ${mdl("s212")}
    - Advection-diffusion test, 16 cells, 3-point flux
  * - ${mdl("s213")}
    - Advection-diffusion test, 32 cells, 3-point flux
  * - ${mdl("s214")}
    - Advection-diffusion test, 64 cells, 3-point flux
  * - ${mdl("s215")}
    - Hasegawa-Wakatani, with adiabacity parameter 0.1
  * - ${mdl("s216")}
    - Hasegawa-Wakatani, with adiabacity parameter 0.01
  * - ${mdl("s217")}
    - Hasegawa-Wakatani, with adiabacity parameter 0.3
  * - ${mdl("s218")}
    - Hasegawa-Wakatani, with adiabacity parameter 1.0
  * - ${mdl("s219")}
    - Hasegawa-Wakatani, with adiabacity parameter 2.0
  * - ${mdl("s220")}
    - 1D Euler shock with low density/pressure
      region. Wave-propagation scheme with pressure/density fix. (See s8)
  * - ${mdl("s221")}
    - Modified Hasegawa-Wakatani, with adiabacity parameter 0.5
  * - ${mdl("s222")}
    - Modified Hasegawa-Wakatani, with adiabacity parameter 1.0
  * - ${mdl("s223")}
    - Two-fluid 5-moment GEM challenge with zero guide field, :math:`256x128` domain
  * - ${mdl("s224")}
    - Two-fluid 5-moment GEM challenge with guide field 0.25, :math:`256x128` domain
  * - ${mdl("s225")}
    - Two-fluid 5-moment GEM challenge with guide field 0.5, :math:`256x128` domain
  * - ${mdl("s226")}
    - Two-fluid 5-moment GEM challenge with guide field 0.75, :math:`256x128` domain
  * - ${mdl("s227")}
    - Two-fluid 5-moment GEM challenge with guide field 1.0, :math:`256x128` domain
  * - ${mdl("s228")}
    - Two-fluid 5-moment GEM challenge with guide field 2.0, :math:`256x128` domain
  * - ${mdl("s229")}
    - Two-fluid 5-moment GEM challenge with guide field 5.0, :math:`256x128` domain
  * - ${mdl("s230")}
    - Two-fluid 5-moment GEM challenge with guide field 10.0, :math:`256x128` domain
  * - ${mdl("s231")}
    - Two-fluid 5-moment GEM challenge with zero guide field, :math:`512x256` domain
  * - ${mdl("s232")}
    - Two-fluid 5-moment GEM challenge with guide field 0.25, :math:`512x256` domain
  * - ${mdl("s233")}
    - Two-fluid 5-moment GEM challenge with guide field 0.5, :math:`512x256` domain
  * - ${mdl("s234")}
    - Two-fluid 5-moment GEM challenge with guide field 0.75, :math:`512x256` domain
  * - ${mdl("s235")}
    - Two-fluid 5-moment GEM challenge with guide field 1.0, :math:`512x256` domain
  * - ${mdl("s236")}
    - Same as 235, except using open BCs instead of walls
  * - ${mdl("s237")}
    - Same as 235 (guide field 1.0), except with 5% perturbation instead of 10%.
  * - ${mdl("s238")}
    - Two-fluid 5-moment GEM challenge, :math:`768\times768` on :math:`25\times 25` domain and open BCs
  * - ${mdl("s239")}
    - Same as s238, except on a :math:`252\times 252` grid.
  * - ${mdl("s240")}
    - Same as s238, except on a :math:`512\times 512` grid.
  * - ${mdl("s241")}
    - Open domain reconnection on :math:`50\times 25` domain, :math:`1024\times 512` grid.
  * - ${mdl("s242")}
    - Diffusion equation with RDG scheme, using 8 cells, polyOrder 1.
  * - ${mdl("s243")}
    - Same as 242, except with 16 cells.
  * - ${mdl("s244")}
    - Same as 242, except with 32 cells.
  * - ${mdl("s245")}
    - Same as 242, except with 64 cells.
  * - ${mdl("s246")}
    - Diffusion equation with RDG scheme, using 4 cells, polyOrder 2.
  * - ${mdl("s247")}
    - Same as 246, except with 8 cells.
  * - ${mdl("s248")}
    - Same as 246, except with 16 cells.
  * - ${mdl("s249")}
    - Same as 249, except with 32 cells.
  * - ${mdl("s250")}
    - Diffusion equation with RDG scheme in 2D, using :math:`8\times 8` cells, polyOrder 1.
  * - ${mdl("s251")}
    - Same as s250, except on :math:`16\times 16` grid.
  * - ${mdl("s252")}
    - Same as s250, except on :math:`32\times 32` grid.
  * - ${mdl("s253")}
    - Same as s250, except on :math:`64\times 64` grid.
  * - ${mdl("s254")}
    - Free streaming of particles on a bounded domain.
  * - ${mdl("s255")}
    - Vlasov equation with fixed potential on a bounded domain.
  * - ${mdl("s256")}
    - Open domain reconnection on :math:`50\times 25` domain, :math:`1536\times 768` grid.
  * - ${mdl("s257")}
    - Blob simulation on :math:`30\times 20` domain and :math:`96\times 64` grid, no diffusion.
  * - ${mdl("s258")}
    - Blob simulation on :math:`60\times 40` domain and :math:`192\times 128` grid, no diffusion.
  * - ${mdl("s259")}
    - Same as s257, except with Rayleigh number :math:`1\times10^{4}`
  * - ${mdl("s260")}
    - Same as s259, except on :math:`192\times 128` grid.
  * - ${mdl("s261")}
    - Same as s260, except with Rayleigh number :math:`1\times10^{6}`
  * - ${mdl("s262")}
    - Same as s260, except with Rayleigh number :math:`1\times10^{8}`
  * - ${mdl("s263")}
    - Same as s260, except on a :math:`60\times 40` domain.
  * - ${mdl("s264")}
    - Same as s260, except on a :math:`60\times 40` domain, :math:`384\times 256` grid.
  * - ${mdl("s265")}
    - Same as s260, except on a :math:`60\times 40` domain and fixed BCs in X and periodic in Y.
  * - ${mdl("s266")}
    - Same as s265, except on a :math:`384\times 256` grid.
  * - ${mdl("s267")}
    - Same as s266, except on a :math:`450\times 300` grid.
  * - ${mdl("s268")}
    - Same as s266, except with central fluxes.
  * - ${mdl("s269")}
    - Free streaming of particles on a bounded domain, with partially reflecting walls. See s254.      
  * - ${mdl("s270")}
    - Open domain reconnection on :math:`50\times 25` domain, :math:`250\times 125` grid.
  * - ${mdl("s271")}
    - Open domain reconnection on :math:`50\times 25` domain, :math:`500\times 250` grid.
  * - ${mdl("s272")}
    - GEM challenge problem with 10-momnent equations, :math:`256\times 128` grid.
  * - ${mdl("s273")}
    - GEM challenge problem with 10-momnent equations, :math:`512\times 256` grid.
  * - ${mdl("s274")}
    - GEM challenge problem with 5-moment equations, :math:`512\times 256` grid and open domain (see s231)
  * - ${mdl("s275")}
    - Open domain reconnection with 10-moment equations, :math:`500\times 250` grid. (See s271)
  * - ${mdl("s276")}
    - Open domain reconnection with 10-moment equations, :math:`1000\times 500` grid. (See s275)
  * - ${mdl("s277")}
    - Same as s275 expect collision frequency of 1.0.
  * - ${mdl("s278")}
    - Same as s275 expect collision frequency of 0.0.
  * - ${mdl("s279")}
    - Same as s277 expect on :math:`1000\times 500` grid.
  * - ${mdl("s280")}
    - Same as s271 (5-moment) except on :math:`1000\times 500` grid.
  * - ${mdl("s281")}
    - Open domain reconnection with 10-moment equations, :math:`500\times 250` grid with local relaxation heat-flux. (See s271)
  * - ${mdl("s282")}
    - Same as s281, except on :math:`1000\times 500` grid.
  * - ${mdl("s283")}
    - Same as s281, except on :math:`250\times 125` grid
  * - ${mdl("s284")}
    - EM pulse in box (see s57). This is to test flux and electric field relations.
  * - ${mdl("s285")}
    - EM pulse in box (see s57 and s284). With in-plane electric field.
  * - ${mdl("s286")}
    - Ten-moment doubly periodic Harris sheet simulation to compare with PSC. On :math:`250\times 125` grid.
  * - ${mdl("s287")}
    - Same as s286, except on a :math:`1000\times 500` grid.
  * - ${mdl("s288")}
    - FDTD Maxwell solver, in preparation for FD/FV two-fluid scheme. (See s63).
  * - ${mdl("s289")}
    - A plamsa in a box, perturbed with a EM pulse. Another attempt to nail down div(E) problems.
  * - ${mdl("s290")}
    - Same as s286, except on a :math:`500\times 250` grid.
  * - ${mdl("s291")}
    - EM pulse in box (see s284). Using dimensional splitting.
  * - ${mdl("s292")}
    - Same as s286, except using dimensional splitting.
  * - ${mdl("s293")}
    - Same as s286, except using explicit RK4 source update (this just for comparsion with s286).
  * - ${mdl("s294")}
    - Same as s292, except on a :math:`500\times 250` grid.
  * - ${mdl("s295")}
    - Same as s292, except on a :math:`500\times 250` grid and :math:`100\times 50` domain.
