<%!
  import subprocess
  import glob

  def makeRst(lua, lang):
    extension = "lua"

    if lang == "lua":
      extension = "lua"
    elif lang == "python":
      extension = "py"

    fls = glob.glob("%s/%s-*.%s" % (lua, lua, extension))
    if (len(fls)>0):
      subprocess.Popen(["python", "./code/mkluarst.py", "-l", fls[0], "-x", lang])
      return fls[0][:fls[0].find(".")]
    return ""
%>
<%def name="mdl(sim, lang='lua')"><% luaFl = makeRst(sim, lang) %>:doc:`${sim} <${luaFl}>` </%def>
Simulation Index
================

Following is a list of simulation numbers with one-line
descriptions. Click on the simulation number to see the complete Lua
program for that simulation.

.. list-table::
  :header-rows: 1
  :widths: 10,90

  * - Number
    - Description
  * - ${mdl("s1")}
    - Poisson solve on a 2D periodic grid, with Gaussian source
  * - ${mdl("s2")}
    - Poisson solve on a 2D periodic grid, with anisotropic Gaussian source
  * - ${mdl("s3")}
    - Poisson solve on a 2D periodic grid, with source a sum of two Gaussians
  * - ${mdl("s4")}
    - Same as s3, but with different grid spacing in X and Y.
  * - ${mdl("s5")}
    - 1D Euler Sod-shock with sonic point in rarefaction. Wave-propagation algorithm.
  * - ${mdl("s6")}
    - Exact solution to s5.
  * - ${mdl("s7")}
    - Same as s5, except using the MUSCL-Hancock scheme.
  * - ${mdl("s8")}
    - 1D Euler shock with low density/pressure region. Wave-propagation scheme.
  * - ${mdl("s9")}
    - Exact solution to s8.
  * - ${mdl("s10")}
    - Same as s8, except using the MUSCL-Hancock scheme.
  * - ${mdl("s11")}
    - 1D Noh problem. Wave-propagation algorithm.
  * - ${mdl("s12")}
    - Exact solution to s11.
  * - ${mdl("s13")}
    - Same as s11, except using the MUSCL-Hancock scheme.
  * - ${mdl("s14")}
    - 1D Euler shock with a stationary contact discontinuity. Wave-propagation scheme.
  * - ${mdl("s15")}
    - Exact solution to s14
  * - ${mdl("s16")}
    - Same as s14, except using the MUSCL-Hancock scheme.
  * - ${mdl("s17")}
    - 1D Euler shock with two strong shocks. Wave-propagation scheme.
  * - ${mdl("s18")}
    - Exact solution to s17
  * - ${mdl("s19")}
    - Same as s17, except using the MUSCL-Hancock scheme.
  * - ${mdl("s20")}
    - 1D Euler with stationary contact discontinuity. Wave-propagation scheme.
  * - ${mdl("s21")}
    - Exact solution to s20
  * - ${mdl("s22")}
    - Same as s20, except using the MUSCL-Hancock scheme.
  * - ${mdl("s23")}
    - 1D Euler with slowly moving contact discontinuity. Wave-propagation scheme.
  * - ${mdl("s24")}
    - Exact solution to s23
  * - ${mdl("s25")}
    - Same as s23, except using the MUSCL-Hancock scheme.
  * - ${mdl("s26")}
    - 1D Euler with sharp spike in density. Wave-propagation scheme.
  * - ${mdl("s27")}
    - Exact solution to s26
  * - ${mdl("s28")}
    - Same as s26, except using the MUSCL-Hancock scheme.
  * - ${mdl("s29")}
    - 1D Euler Woodward-Collela blast wave problem. Wave-propagation scheme.
  * - ${mdl("s30")}
    - Same as s29 run with higher-resolution to serve as an "exact" solution.
  * - ${mdl("s31")}
    - Same as s29, except using the MUSCL-Hancock scheme.
  * - ${mdl("s32")}
    - Slab RTE with Mie scattering with :math:`L=8`.
  * - ${mdl("s33")}
    - Slab RTE with Haze-L phase function with :math:`L=82`.
  * - ${mdl("s34")}
    - Same as s33 but with :math:`\mu_0=0.5`.
  * - ${mdl("s35")}
    - Same as s33 but with :math:`\varpi=1.0`.
  * - ${mdl("s36")}
    - Two-fluid shock problem with :math:`q_i/m_i = 1.0`.
  * - ${mdl("s37")}
    - Two-fluid shock problem with :math:`q_i/m_i = 10.0`.
  * - ${mdl("s38")}
    - Two-fluid shock problem with :math:`q_i/m_i = 100.0`
  * - ${mdl("s39")}
    - Two-fluid shock problem with :math:`q_i/m_i = 1000.0`
  * - ${mdl("s40")}
    - Dispersive Euler equations with :math:`\omega_c = 10` and 100 cells.
  * - ${mdl("s41", "python")}
    - Exact solution of dispersive Euler equations.
  * - ${mdl("s42")}
    - Dispersive Euler equations with :math:`\omega_c = 10` and 200 cells.
  * - ${mdl("s43")}
    - Dispersive Euler equations with :math:`\omega_c = 10` and 300 cells.
  * - ${mdl("s44")}
    - Dispersive Euler equations with :math:`\omega_c = 10` and 400 cells.
  * - ${mdl("s45")}
    - Dispersive Euler equations with :math:`\omega_c = 100` and 200 cells.
  * - ${mdl("s46")}
    - Dispersive Euler equations with :math:`\omega_c = 100` and 400 cells.
  * - ${mdl("s47")}
    - Sod-shock for dispersive Euler equations.
  * - ${mdl("s48")}
    - Same as s45 but larger time-step.
  * - ${mdl("s49")}
    - Wave-propagation scheme for Maxwell equation TM (8,5) mode, :math:`80\times 40` grid.
  * - ${mdl("s50")}
    - Same as s49 but with :math:`160\times 80` grid.
  * - ${mdl("s51")}
    - Same as s49 but with :math:`240\times 120` grid.
  * - ${mdl("s52")}
    - Same as s49 but with :math:`320\times 160` grid.
  * - ${mdl("s53")}
    - FDTD scheme for Maxwell equation TM (8,5) mode, :math:`80\times 40` grid.
  * - ${mdl("s54")}
    - Same as s53 but with :math:`160\times 80` grid.
  * - ${mdl("s55")}
    - Same as s53 but with :math:`240\times 120` grid.
  * - ${mdl("s56")}
    - Same as s53 but with :math:`320\times 160` grid.
  * - ${mdl("s57")}
    - Pulse in metal box with wave-propagation scheme.
  * - ${mdl("s58")}
    - Pulse in metal box with FDTD scheme.
  * - ${mdl("s59")}
    - Same as s58 but using a :math:`400 \times 400` grid.
  * - ${mdl("s60")}
    - Same as s58 but using a :math:`400 \times 400` grid.
  * - ${mdl("s61")}
    - 1D Riemann problem with wave-propagation scheme.
  * - ${mdl("s62")}
    - 1D Riemann problem with FDTD scheme.
  * - ${mdl("s63")}
    - FDTD scheme on dual Yee-cell for Maxwell equation TM (8,5) mode,
      :math:`80\times 40` grid.
  * - ${mdl("s64")}
    - FDTD scheme on dual Yee-cell for Maxwell equation. Pulse problem.
  * - ${mdl("s65")}
    - Plasma wave beach problem, without the plasma. Using 100 cells.
  * - ${mdl("s66")}
    - Plasma wave beach problem, without the plasma. Using 200 cells.
  * - ${mdl("s67")}
    - Plasma wave beach problem using 100 cells.
  * - ${mdl("s68")}
    - Plasma wave beach problem using 200 cells.